<style>
    .MyCardElement {
        height: 40px;
        padding: 10px 12px;
        width: 68%;
        color: #32325d;
        background-color: white;
        border: 1px solid transparent;
        border-radius: 4px;

        box-shadow: 0 1px 3px 0 #0a5e2a;
        -webkit-transition: box-shadow 150ms ease;
        transition: box-shadow 150ms ease;
    }

    .text-mycardelement {
        width: 60%;
        font-size: 14px;
    }

    .button-container {
        width: 80%;
    }

    .MyCardElement--focus {
        box-shadow: 0 1px 3px 0 #cfd7df;
    }

    .MyCardElement--invalid {
        border-color: #fa755a;
    }

    .MyCardElement--webkit-autofill {
        background-color: #fefde5 !important;
    }

    .container-media {
        width: 70%;
    }

    .container-media-inner {
        width: 71%;
    }

    @media (max-width: 500px) {
        .container-media {
            width: 95%;
        }

        .container-media-inner {
            width: 90%;
        }

        .MyCardElement {
            width: 85%;
        }

        .text-price {
            font-size: 27px;
        }
    }
</style>

<h2 class="text-center py-3">{{{user_json.name}}}, estÃ¡s a pocos pasos de adquirir tu plan</h2>

<form id="subscription-form" action="/subscription/create" method="POST">
    <input type="hidden" value="{{ subscription.subscriptionName }}" name="productName" id="productName" />
    <input type="hidden" value="{{ subscription.subscriptionId }}" name="planId" id="planId" />
    <input type="hidden" value="{{ subscription.subscriptionAmount }}" name="planAmount" id="planAmount" />
    <input type="hidden" value="{{ subscription.subscriptionName }}" name="planName" id="planName" />
    <input type="hidden" value="{{ subscription.subscriptionInterval }}" name="planInterval" id="planInterval" />
    <input type="hidden" value="{{ subscription.subscriptionPriceId }}" name="priceId" id="priceId" />
    <input type="hidden" value="{{ user_json.stripeCustomerId}}" name="customerId" id="customerId" />

    <div class="card text-center container-media" style="margin: auto;">
        <div class="d-flex card-header">
            <div class="text-left flex-nowrap">
                <div>
                    <span class="text-muted" style="font-size: 12px">Plan seleccionado</span>
                </div>
                <div>
                    <span style="font-size: 14px;"><strong>{{subscription.subscriptionName}}</strong></span>
                </div>
                <div>
                    <span style="font-size: 12px;">Pago mensual automÃ¡tico</span>
                </div>
            </div>
            <div class="ml-auto mt-auto mb-auto ">
                <h2 class="text-price">ðŸ‡²ðŸ‡½ ${{subscription.subscriptionAmount}} {{subscription.subscriptionCurrency}}
                </h2>
            </div>
        </div>
        <div class="card-body">

            <div class="container p-2 container-media-inner">
                <div class="d-flex">
                    <div class="form-check mr-auto">
                        <input class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios1"
                            value="option1" checked>
                        <label class="form-check-label" for="exampleRadios1">
                            Pagar con tarjeta
                        </label>
                    </div>
                    <div class="ml-auto">
                        <img src="/img/stripe_card.png" alt="Pagar con tarjeta" style="height: 22px;">
                    </div>
                </div>
            </div>
            <div class="text-mycardelement d-flex container mt-4 container-media-inner">
                <label for="" class="mr-auto">Ingresa tu nombre</label>
            </div>
            <div class="d-flex container mb-4 container-media-inner">
                <input type="text" name="name" class="form-control " id="name"
                    placeholder="Nombre titular de la tarjeta" required autofocus>
            </div>

            <div class="text-mycardelement d-flex container text-left container-media-inner">
                <label for="" class="mr-auto">Ingresa la informaciÃ³n de tu tarjeta</label>
            </div>
            <div id="card-element" class="MyCardElement container">
                <!-- Elements will create input elements here -->
            </div>

            <!-- We'll put the error messages in this element -->
            <div id="card-errors" role="alert" style="font-size: 14px;"></div>
            <br>

            <div class="container p-1 text-center container-media-inner" style="text-align: center;">

                <button class="btn btn-success btn-block text-center py-3" type="submit"
                    style="display: flex; justify-content: center; font-size: 18px;">Pagar
                    ${{subscription.subscriptionAmount}}/{{subscription.subscriptionInterval}}</button>
            </div>
        </div>

        <div class="card-footer text-muted">
            <i class="fas fa-lock"></i> Pago 100% seguro, protegemos tus datos.
        </div>
    </div>
</form>






<script>
    var stripe = Stripe('pk_test_51HFryEHgLC7tFrSVSqYKy6iFgpLsp2vz8BWtvfaQof7mESDbcMHqUu6w00NJEfZK2iLBujdfMQL1yZkLj7J2iUdE00ejXy4lDv');
    var elements = stripe.elements();

    var style = {
        base: {
            fontSize: '16px', '::placeholder': { color: "#aab7c4" },
            fontFamily: '"Open Sans", "Helvetica", sans-serif',
            fontSmoothing: 'antialiased',
        },
        invalid: {
            color: '#fa755a',
            iconColor: '#fa755a'
        }
    };

    var card = elements.create('card', { hidePostalCode: true, style: style });
    card.mount('#card-element');

    const customerId = document.getElementById('customerId').value;
    const priceId = document.getElementById('priceId').value;

    console.log(customerId);
    console.log(priceId);

    card.addEventListener('change', event => {
        var displayError = document.getElementById('card-errors');

        if (event.error) {
            displayError.textContent = event.error.message;
        } else {
            displayError.textContent = '';
        }
    });


    var form = document.getElementById('subscription-form');

    form.addEventListener('submit', function (ev) {
        ev.preventDefault();

        // If a previous payment was attempted, get the latest invoice
        const latestInvoicePaymentIntentStatus = localStorage.getItem(
            'latestInvoicePaymentIntentStatus'
        );

        if (latestInvoicePaymentIntentStatus === 'requires_payment_method') {
            const invoiceId = localStorage.getItem('latestInvoiceId');
            const isPaymentRetry = true;
            // create new payment method & retry payment on invoice with new payment method
            createPaymentMethod({
                card,
                isPaymentRetry,
                invoiceId,
            });
        } else {
            // create new payment method & create subscription
            createPaymentMethod({ card });
        }
    });



    function createPaymentMethod({ card, isPaymentRetry, invoiceId }) {
        // Set up payment method for recurring usage
        let billingName = document.querySelector('#name').value;

        stripe
            .createPaymentMethod({
                type: 'card',
                card: card,
                billing_details: {
                    name: billingName,
                },
            })
            .then((result) => {
                if (result.error) {
                    displayError(result);
                } else {
                    if (isPaymentRetry) {
                        // Update the payment method and retry invoice payment
                        retryInvoiceWithNewPaymentMethod({
                            customerId: customerId,
                            paymentMethodId: result.paymentMethod.id,
                            invoiceId: invoiceId,
                            priceId: priceId,
                        });
                    } else {
                        // Create the subscription
                        createSubscription({
                            customerId: customerId,
                            paymentMethodId: result.paymentMethod.id,
                            priceId: priceId,
                        });
                    }
                }
            });
    }



    function createSubscription({ customerId, paymentMethodId, priceId }) {
        return (
            fetch('/subscription/create', {
                method: 'post',
                headers: {
                    'Content-type': 'application/json',
                },
                body: JSON.stringify({
                    customerId: customerId,
                    paymentMethodId: paymentMethodId,
                    priceId: priceId,
                }),
            })
                .then((response) => {
                    console.log(response);
                    return response.json();
                })
                // If the card is declined, display an error to the user.
                .then((result) => {
                    if (result.error) {
                        // The card had an error when trying to attach it to a customer.
                        throw result;
                    }
                    return result;
                })
                // Normalize the result to contain the object returned by Stripe.
                // Add the additional details we need.
                .then((result) => {
                    return {
                        paymentMethodId: paymentMethodId,
                        priceId: priceId,
                        subscription: result,
                    };
                })
                // Some payment methods require a customer to be on session
                // to complete the payment process. Check the status of the
                // payment intent to handle these actions.
                .then(handlePaymentThatRequiresCustomerAction)
                // If attaching this card to a Customer object succeeds,
                // but attempts to charge the customer fail, you
                // get a requires_payment_method error.
                .then(handleRequiresPaymentMethod)
                // No more actions required. Provision your service for the user.
                .then(onSubscriptionComplete)

                .catch((error) => {
                    // An error has happened. Display the failure to the user here.
                    // We utilize the HTML element we created.
                    showCardError(error);
                })
        );
    }



    function onSubscriptionComplete(result) {
        window.location.href = 'http://localhost:4000/admin';
        // Payment was successful.
        if (result.subscription.status == 'active') {
            
        }
    }



    function handlePaymentThatRequiresCustomerAction({
        subscription,
        invoice,
        priceId,
        paymentMethodId,
        isRetry,
    }) {
        if (subscription && subscription.status === 'active') {
            // Subscription is active, no customer actions required.
            return { subscription, priceId, paymentMethodId };
        }

        // If it's a first payment attempt, the payment intent is on the subscription latest invoice.
        // If it's a retry, the payment intent will be on the invoice itself.
        let paymentIntent = invoice ? invoice.payment_intent : subscription.latest_invoice.payment_intent;

        if (
            paymentIntent.status === 'requires_action' ||
            (isRetry === true && paymentIntent.status === 'requires_payment_method')
        ) {
            return stripe
                .confirmCardPayment(paymentIntent.client_secret, {
                    payment_method: paymentMethodId,
                })
                .then((result) => {
                    if (result.error) {
                        // Start code flow to handle updating the payment details.
                        // Display error message in your UI.
                        // The card was declined (i.e. insufficient funds, card has expired, etc).
                        throw result;
                    } else {
                        if (result.paymentIntent.status === 'succeeded') {
                            // Show a success message to your customer.
                            // There's a risk of the customer closing the window before the callback.
                            // We recommend setting up webhook endpoints later in this guide.
                            return {
                                priceId: priceId,
                                subscription: subscription,
                                invoice: invoice,
                                paymentMethodId: paymentMethodId,
                            };
                        }
                    }
                })
                .catch((error) => {
                    displayError(error);
                });
        } else {
            // No customer action needed.
            return { subscription, priceId, paymentMethodId };
        }
    }




    function handleRequiresPaymentMethod({
        subscription,
        paymentMethodId,
        priceId,
    }) {
        if (subscription.status === 'active') {
            // subscription is active, no customer actions required.
            return { subscription, priceId, paymentMethodId };
        } else if (
            subscription.latest_invoice.payment_intent.status ===
            'requires_payment_method'
        ) {
            // Using localStorage to manage the state of the retry here,
            // feel free to replace with what you prefer.
            // Store the latest invoice ID and status.
            localStorage.setItem('latestInvoiceId', subscription.latest_invoice.id);
            localStorage.setItem(
                'latestInvoicePaymentIntentStatus',
                subscription.latest_invoice.payment_intent.status
            );
            throw { error: { message: 'Your card was declined.' } };
        } else {
            return { subscription, priceId, paymentMethodId };
        }
    }



    function retryInvoiceWithNewPaymentMethod({
        customerId,
        paymentMethodId,
        invoiceId,
        priceId
    }) {
        return (
            fetch('/retry-invoice', {
                method: 'post',
                headers: {
                    'Content-type': 'application/json',
                },
                body: JSON.stringify({
                    customerId: customerId,
                    paymentMethodId: paymentMethodId,
                    invoiceId: invoiceId,
                }),
            })
                .then((response) => {
                    return response.json();
                })
                // If the card is declined, display an error to the user.
                .then((result) => {
                    if (result.error) {
                        // The card had an error when trying to attach it to a customer.
                        throw result;
                    }
                    return result;
                })
                // Normalize the result to contain the object returned by Stripe.
                // Add the additional details we need.
                .then((result) => {
                    return {
                        // Use the Stripe 'object' property on the
                        // returned result to understand what object is returned.
                        invoice: result,
                        paymentMethodId: paymentMethodId,
                        priceId: priceId,
                        isRetry: true,
                    };
                })
                // Some payment methods require a customer to be on session
                // to complete the payment process. Check the status of the
                // payment intent to handle these actions.
                .then(handlePaymentThatRequiresCustomerAction)
                // No more actions required. Provision your service for the user.
                .then(onSubscriptionComplete)
                .catch((error) => {
                    // An error has happened. Display the failure to the user here.
                    // We utilize the HTML element we created.
                    displayError(error);
                })
        );
    }



    function cancelSubscription() {
        return fetch('/cancel-subscription', {
            method: 'post',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                subscriptionId: subscriptionId,
            }),
        })
            .then(response => {
                return response.json();
            })
            .then(cancelSubscriptionResponse => {
                // Display to the user that the subscription has been cancelled.
            });
    }



    function retrieveCustomerPaymentMethod(paymentMethodId) {
        return fetch('/retrieve-customer-payment-method', {
            method: 'post',
            headers: {
                'Content-type': 'application/json',
            },
            body: JSON.stringify({
                paymentMethodId: paymentMethodId,
            }),
        })
            .then((response) => {
                return response.json();
            })
            .then((response) => {
                return response;
            });
    }

</script>